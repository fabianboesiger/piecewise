name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  tag_check:
    name: Check Cargo Version and Create Tag
    runs-on: ubuntu-latest
    
    outputs:
      new_tag: ${{ steps.tagging.outputs.new_tag }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Auto-Tag New Version
        id: tagging
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          LATEST_TAG=$(git describe --tags --abbrev=0 2> /dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          
          NEW_TAG="v$CARGO_VERSION"
          
          echo "Current Cargo.toml Version: $CARGO_VERSION"
          echo "Latest Tagged Version: $LATEST_TAG ($LATEST_VERSION)"
          
          if [[ "$CARGO_VERSION" != "$LATEST_VERSION" ]]; then
            echo "::notice title=New Version Detected::Creating and pushing tag $NEW_TAG. The release job will proceed in this run."
            
            # Create and push the tag using the standard GITHUB_TOKEN
            git tag "$NEW_TAG" -a -m "Release $NEW_TAG"
            # Use GITHUB_TOKEN context instead of GH_TRIGGER_TOKEN secret
            REPO_URL="https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
            git push "$REPO_URL" "$NEW_TAG"
            
            # Set the output variable for the next job
            echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
            
          else
            echo "Cargo.toml version ($CARGO_VERSION) matches latest tag. Skipping tag creation."
            # Set output to empty string to skip the release_build job
            echo "new_tag=" >> $GITHUB_OUTPUT
          fi

  release_build:
    name: Build ${{ matrix.platform }} Binary
    
    if: needs.tag_check.outputs.new_tag != ''
    runs-on: ${{ matrix.os }}
    
    needs: tag_check 
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            filename: Piecewise
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            platform: windows
            filename: Piecewise.exe
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            platform: macos
            filename: Piecewise.app
            target: x86_64-apple-darwin
            
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.tag_check.outputs.new_tag }}
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}
          override: true

      - uses: Swatinem/rust-cache@v2
      
      - name: Install System Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y --reinstall pkg-config libicu-dev build-essential clang lld libssl-dev libglib2.0-dev libgtk-3-dev libgtk-4-dev libwebkit2gtk-4.1-dev libsoup-3.0-dev libxdo-dev

      - name: Install System Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl@3
          brew link openssl@3 --force

      - name: Update Project Dependencies
        shell: bash
        run: cargo update --locked

      - name: Install Dioxus-CLI
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          cargo binstall dioxus-cli --force
          
      - name: Build Native Project for ${{ matrix.platform }}
        shell: bash
        run: dx build --release --platform ${{ matrix.platform }} -- -vv

      - name: Zip the release artifact
        uses: TheDoctor0/zip-release@main
        with:
          filename: target/dx/piecewise/release/${{ matrix.platform }}.zip
          path: target/dx/piecewise/release/${{ matrix.platform }}
          
      - name: Upload Native Executable to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: target/dx/piecewise/release/${{ matrix.platform }}.zip
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ needs.tag_check.outputs.new_tag }}

